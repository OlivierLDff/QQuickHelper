SET( QQUICKHELPER_TARGET "QQuickHelper" CACHE STRING "Target Name" )
SET( QQUICKHELPER_PROJECT "QQuickHelper" CACHE STRING "Project Name")
SET( QQUICKHELPER_BUILD_SHARED OFF CACHE BOOL "Build as a shared library" )
SET( QQUICKHELPER_USE_NAMESPACE ON CACHE BOOL "Should the library be compiled with a namespace. Default: ON" )
SET( QQUICKHELPER_NAMESPACE "Qqh" CACHE BOOL "Namespace of the library is QQUICKHELPER_USE_NAMESPACE is ON. Default : Qqh" )
SET( QQUICKHELPER_QTVERSION "5.11" CACHE STRING "Version that is going to be compiled" )

SET(QQUICKHELPER_VERSION_MAJOR 1)
SET(QQUICKHELPER_VERSION_MINOR 0)
SET(QQUICKHELPER_VERSION_PATCH 0)
IF( EXISTS "${CMAKE_SOURCE_DIR}/.git" )
	EXECUTE_PROCESS(
		COMMAND git describe --always
		WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
		OUTPUT_VARIABLE QQUICKHELPER_VERSION_TAG
		OUTPUT_STRIP_TRAILING_WHITESPACE
	)
ELSE()
	SET( QQUICKHELPER_VERSION_TAG 00000000 )
ENDIF()
SET( QQUICKHELPER_VERSION_TAG_HEX 0x${QQUICKHELPER_VERSION_TAG})

PROJECT( ${QQUICKHELPER_PROJECT} )
SET_PROPERTY(GLOBAL PROPERTY USE_FOLDERS ON)

# ─── GLOBAL ────────
MESSAGE( "------ ${QQUICKHELPER_TARGET} Configuration ------" )
MESSAGE( STATUS "QQUICKHELPER_PROJECT                : ${QQUICKHELPER_PROJECT}" )
MESSAGE( STATUS "QQUICKHELPER_TARGET                 : ${QQUICKHELPER_TARGET}" )
MESSAGE( STATUS "QQUICKHELPER_BUILD_SHARED           : ${QQUICKHELPER_BUILD_SHARED}" )
MESSAGE( STATUS "QQUICKHELPER_QTVERSION              : ${QQUICKHELPER_QTVERSION}" )
MESSAGE( STATUS "QQUICKHELPER_VERSION                : ${QQUICKHELPER_VERSION_MAJOR}.${QQUICKHELPER_VERSION_MINOR}.${QQUICKHELPER_VERSION_PATCH}" )
MESSAGE( STATUS "QQUICKHELPER_VERSION_TAG_HEX        : ${QQUICKHELPER_VERSION_TAG_HEX}" )

MESSAGE( "------ ${QQUICKHELPER_TARGET} End Configuration ------" )

SET( CMAKE_AUTOMOC ON )
SET( CMAKE_AUTORCC ON )
set (CMAKE_CXX_STANDARD 11) 

SET(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM BOTH)

FIND_PACKAGE(Qt5Core CONFIG REQUIRED CMAKE_FIND_ROOT_PATH_BOTH)
FIND_PACKAGE(Qt5Quick CONFIG REQUIRED CMAKE_FIND_ROOT_PATH_BOTH)
FIND_PACKAGE(Qt5QuickControls2 CONFIG REQUIRED CMAKE_FIND_ROOT_PATH_BOTH)
FIND_PACKAGE(Qt5QuickCompiler CONFIG REQUIRED CMAKE_FIND_ROOT_PATH_BOTH)

file(GLOB_RECURSE QQUICKHELPERQQUICKHELPER_SRCS qml/*.qml)

foreach(_source IN ITEMS ${QQUICKHELPER_SRCS})
	get_filename_component(_source_path "${_source}" PATH)
	file(RELATIVE_PATH _source_path_rel ${CMAKE_CURRENT_SOURCE_DIR}/res "${_source_path}")
	string(REPLACE "/" "\\" _group_path "${_source_path_rel}")
	source_group("${_group_path}" FILES "${_source}")
endforeach()

# Add qml to the qtquick compiler
qtquick_compiler_add_resources(QQUICKHELPER_QML_RES ${CMAKE_CURRENT_SOURCE_DIR}/qml/${QQUICKHELPER_QTVERSION}/QQuickHelperControls.qrc)

# Trick to rerun cmake each time qml.qrc is updated
CONFIGURE_FILE(
  ${CMAKE_CURRENT_SOURCE_DIR}/qml/${QQUICKHELPER_QTVERSION}/QQuickHelperControls.qrc
  ${CMAKE_CURRENT_BINARY_DIR}/QQuickHelperControls.junk
)

# Dont Run Moc on cpp file generated from cpp
FOREACH(CacheQml ${QQUICKHELPER_QML_RES})
	SET_PROPERTY(SOURCE ${CacheQml} PROPERTY SKIP_AUTOMOC ON)
	SOURCE_GROUP( "QmlMoc Files" FILES ${CacheQml} )
ENDFOREACH(CacheQml)

IF(${QQUICKHELPER_BUILD_SHARED})
	ADD_LIBRARY( ${QQUICKHELPER_TARGET} STATIC 
		${QQUICKHELPER_QML_RES}
		${CMAKE_CURRENT_SOURCE_DIR}/src/QQuickHelper.hpp
		${CMAKE_CURRENT_SOURCE_DIR}/src/QQuickHelper.cpp
	)
	IF( MSVC )
	GENERATE_EXPORT_HEADER( ${QQUICKHELPER_TARGET}
		BASE_NAME ${QQUICKHELPER_TARGET}
		EXPORT_MACRO_NAME ${QQUICKHELPER_TARGET}_EXPORT
		EXPORT_FILE_NAME ${QQUICKHELPER_TARGET}_Export.h
		STATIC_DEFINE ${QQUICKHELPER_TARGET}_BUILT_AS_STATIC
	)
	ENDIF( MSVC )
	TARGET_COMPILE_DEFINITIONS( ${QQUICKHELPER_TARGET} PUBLIC -DQQUICKHELPER_SHARED )
ELSE(${QQUICKHELPER_BUILD_SHARED})
	ADD_LIBRARY( ${QQUICKHELPER_TARGET} STATIC 
		${QQUICKHELPER_QML_RES}
		${CMAKE_CURRENT_SOURCE_DIR}/src/QQuickHelper.hpp
		${CMAKE_CURRENT_SOURCE_DIR}/src/QQuickHelper.cpp
	)
	TARGET_COMPILE_DEFINITIONS( ${QQUICKHELPER_TARGET} PUBLIC -DQQUICKHELPER_STATIC )
ENDIF(${QQUICKHELPER_BUILD_SHARED})

qt5_use_modules( ${QQUICKHELPER_TARGET} Core Gui Svg QuickControls2 Quick )
TARGET_INCLUDE_DIRECTORIES( ${QQUICKHELPER_TARGET} PUBLIC ${CMAKE_CURRENT_SOURCE_DIR}/src )
TARGET_COMPILE_DEFINITIONS( ${QQUICKHELPER_TARGET} PRIVATE -DQQUICKHELPER_VERSION_MAJOR=${QQUICKHELPER_VERSION_MAJOR} )
TARGET_COMPILE_DEFINITIONS( ${QQUICKHELPER_TARGET} PRIVATE -DQQUICKHELPER_VERSION_MINOR=${QQUICKHELPER_VERSION_MINOR} )
TARGET_COMPILE_DEFINITIONS( ${QQUICKHELPER_TARGET} PRIVATE -DQQUICKHELPER_VERSION_PATCH=${QQUICKHELPER_VERSION_PATCH} )
TARGET_COMPILE_DEFINITIONS( ${QQUICKHELPER_TARGET} PRIVATE -DQQUICKHELPER_VERSION_TAG=${QQUICKHELPER_VERSION_TAG} )
TARGET_COMPILE_DEFINITIONS( ${QQUICKHELPER_TARGET} PRIVATE -DQQUICKHELPER_VERSION_TAG_HEX=${QQUICKHELPER_VERSION_TAG_HEX} )
IF(QQUICKHELPER_USE_NAMESPACE)
TARGET_COMPILE_DEFINITIONS( ${QQUICKHELPER_TARGET} PUBLIC -DQQUICKHELPER_USE_NAMESPACE )
TARGET_COMPILE_DEFINITIONS( ${QQUICKHELPER_TARGET} PUBLIC -DQQUICKHELPER_NAMESPACE=${QQUICKHELPER_NAMESPACE} )
ENDIF(QQUICKHELPER_USE_NAMESPACE)